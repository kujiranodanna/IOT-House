#! /bin/sh
### BEGIN INIT INFO
# Provides:          svscan
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: i386 svscan daemon
# Description:       i386 svscan daemon \
# service, 2017/10/16 by Isamu.Yamauchi
# 
### END INIT INFO


# Author: Isamu.Yamauchi <izamu@pepolinux.jpn.org>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.


# Do NOT "set -e"


# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
NAME=svscan
SUPERVISE=supervise
DESC="$NAME of the service"
DAEMON=/usr/bin/$NAME
SVDIR=/service
DAEMON_ARGS="/service"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0


# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME


# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh




# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions


#
# Function that starts the daemon/service
#
do_start()
{
        # Return
        #   0 if daemon has been started
        #   1 if daemon was already running
        #   2 if daemon could not be started
        CT_SUPERVISE=`pgrep $SUPERVISE| wc -w`
        [ $CT_SUPERVISE -ne 0 ] && return 1
        start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON $DAEMON_ARGS --background
        RETVAL="$?"
        msleep 1000
        PID_DAEMON=`pgrep -f $DAEMON`
        if [ ! -z $PID_DAEMON ];then
          echo $PID_DAEMON > $PIDFILE
          return $RETVAL        
	fi
# Add code here, if necessary, that waits for the process to be ready
        # to handle requests from services started subsequently which depend
        # on this one.  As a last resort, sleep for some time.
}


#
# Function that stops the daemon/service
#
do_stop()
{
        # Return
        #   0 if daemon has been stopped
        #   1 if daemon was already stopped
        #   2 if daemon could not be stopped
        #   other if a failure occurred
        CT_SUPERVISE=`pgrep $SUPERVISE| wc -w`
	[ $CT_SUPERVISE -eq 0 ] && return 1
        killproc -p "$PIDFILE" "$DAEMON" -HUP
#        PID_DAEMON=`cat $PIDFILE`
#        kill -HUP $PID_DAEMON
        (cd $SVDIR && svc -dx $SVDIR/*/ >/dev/null 2>&1)
#2017.10.16 add
        [ -e $PIDFILE ] && rm -f $PIDFILE
        return "$RETVAL"
        while [ $CT_SUPERVISE -ne 0 ];do
          CT_SUPERVISE=`pgrep $SUPERVISE| wc -w`
        done
        start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
        RETVAL="$?"
        if [ "$RETVAL" = 0 ];then
          [ -e $PIDFILE ] && rm -f $PIDFILE
          return "$RETVAL"
        fi
        # Wait for children to finish too if this is a daemon that forks
        # and if the daemon is only ever run from this initscript.
        # If the above conditions are not satisfied then add some other code
        # that waits for the process to drop all resources that could be
        # needed by services started subsequently.  A last resort is to
        # sleep for some time.
        start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
        RETVAL="$?"
        # Many daemons don't delete their pidfiles when they exit.
        rm -f $PIDFILE
        return $RETVAL
}


#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
        #
        # If the daemon can reload its configuration without
        # restarting (for example, when it is sent a SIGHUP),
        # then implement that here.
        #
        start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
        return 0
}


case "$1" in
  start)
        log_daemon_msg "Starting $DESC" "$NAME"
        do_start 
        case "$?" in
                0)     log_end_msg 0 ;;
                1|2)   log_end_msg 1 ;;
        esac
        ;;
  stop)
        log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        RETVAL="$?"
        case "$RETVAL" in
                0)     log_end_msg 0 ;;
                1|2)   log_end_msg 1 ;;
        esac
        ;;
  status)
        status_of_proc "$DAEMON" "$NAME" "$SUPERVISE" && exit 0 || exit $?
        ;;
  #reload|force-reload)
        #
        # If do_reload() is not implemented then leave this commented out
        # and leave 'force-reload' as an alias for 'restart'.
        #
        #log_daemon_msg "Reloading $DESC" "$NAME"
        #do_reload
        #log_end_msg $?
        #;;
  restart|force-reload)
        #
        # If the "reload" option is implemented then remove the
        # 'force-reload' alias
        #
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
          0|1)
                do_start
                case "$?" in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; # Old process is still running
                        *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
          *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
  *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
        exit 3
        ;;
esac


:
