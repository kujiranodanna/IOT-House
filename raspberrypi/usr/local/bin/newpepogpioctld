#!/bin/bash
# licence GPLv3 ; this scripts designed by Isamu.Yamauchi 2018.1.8 update 2019.5.26
# Scan GPIO for rasberry pi zero W.
# pepogpioctld
GPIOCTL="/usr/local/bin/pepogpioctl 8"
GPIOINT="/usr/local/bin/pepogpioctl 9"
GPIOCTL_I2C="/usr/local/bin/pepoam2320"
GPIOCTL_I2CBME680="/usr/local/bin/pepobme680"
GPIOCTL_0="/usr/local/bin/pepogpioctl 0 0"
GPIOCTL_1="/usr/local/bin/pepogpioctl 1 0"
GPIOCTL_2="/usr/local/bin/pepogpioctl 2 0"
GPIOCTL_3="/usr/local/bin/pepogpioctl 3 0"
GPIOCTL_DO="/usr/local/bin/pepogpioctl"
GPIOCTL_HELP_0="/usr/local/bin/pepogpiohelp 0 0"
GPIOCTL_HELP_1="/usr/local/bin/pepogpiohelp 1 0"
GPIOCTL_HELP_2="/usr/local/bin/pepogpiohelp 2 0"
GPIOCTL_HELP_3="/usr/local/bin/pepogpiohelp 3 0"
WAIT=5
LOOPSLEEP=1000
LOOPDOCT=2
LOOPI2CT=30
gpio_i2c="-1"
DIR=/www/remote-hand/tmp
GPIOGPIORD=$DIR/.gpiodi_read_data
tGPIOGPIORD=$DIR/.gpiodi_read_data.tmp
GPIOGPIOWD=$DIR/.gpiodo_write_data
tGPIOGPIOWD=$DIR/.gpiodo_write_data.tmp
DOWDHELP=$DIR/.gpiodo_write_helper
ALIAS_DI=$DIR/.alias_di
GPIOGPIO_INIT_FLAG=YES
BME680_RD=$DIR/.pepobme680
error(){
  [ -e $tGPIOGPIORD ] && rm -f $tGPIORD
  [ -e $GPIOGPIORD ] && rm -f $GPIOGPIORD
  [ -e $GPIOGPIOWD ] && rm -f $GPIOGPIOWD
  pkill $GPIOCTL_I2CBME680
  exit 0
}
trap error SIGTERM SIGHUP SIGKILL SIGINT SIGQUIT
[ -e $tGPIOGPIORD ] && rm -f $tGPIOGPIORD
[ -e $GPIOGPIORD ] && rm -f $GPIOGPIORD
[ -e $GPIOGPIOWD ] && rm -f $GPIOGPIOWD
[ -e $tGPIOGPIOWD ] && rm -f $tGPIOGPIOWD
LOOPDO=${LOOPDOCT}
LOOPI2C=${LOOPI2CT}
pkill $GPIOCTL_I2CBME680
while true;do
  unset DI_TTY
  [ -e $ALIAS_DI ] && . $ALIAS_DI
  if [ "$DI_TTY" = "piface" -o  "$DI_TTY" = "none" ];then
    [ -e $GPIOGPIORD ] && rm -f $GPIOGPIORD
    [ -e $GPIOGPIOWD ] && rm -f $GPIOGPIOWD
    GPIOGPIO_INIT_FLAG=YES
    LOOPTIME=$LOOPSLEEP
    msleep $LOOPTIME
    pkill $GPIOCTL_I2CBME680
    continue
  fi
  unset piface_ip di do DO
  for i in 0 1 2 3 4 5 6 7; do old[$i]="-1" ;done
  LOOPTIME=$LOOPSLEEP
# gpio_do initialize
  if [ $GPIOGPIO_INIT_FLAG = YES ];then
    RD=`$GPIOINT 2>&1`
    GPIOGPIO_INIT_FLAG=NO
    $GPIOCTL_I2CBME680 &
  fi
#DO write
  if [ -e $DOWDHELP ];then
    if [ $LOOPDO = 0 ];then
      LOOPDO=${LOOPDOCT}
      unset DO
      . $DOWDHELP
      for i in 0 1 2 3; do
      if [ ! -z ${DO[$i]} ];then
        case "$i" in
          0) RD=`$GPIOCTL_DO 0 ${DO[0]} 2>&1 ;msleep $WAIT` ;;
          1) RD=`$GPIOCTL_DO 1 ${DO[1]} 2>&1 ;msleep $WAIT` ;;
          2) RD=`$GPIOCTL_DO 2 ${DO[2]} 2>&1 ;msleep $WAIT` ;;
          3) RD=`$GPIOCTL_DO 3 ${DO[3]} 2>&1 ;msleep $WAIT` ;;
        esac
      fi
      done
    else
      LOOPDO=$(($LOOPDO - 1))
    fi
  fi
  if [ $LOOPI2C = 0 ];then
    LOOPI2C=$LOOPI2CT
    if [ -e $BME680_RD ];then
      gpio_i2c=`cat $BME680_RD | awk 'BEGIN{FS=","};{split($1,I,"/");printf("%s,%s℃,%s％,%shPa,%sOms",I[4],$2,$3,$4,$5,$6)}'`
      BME680HUM=`cat $BME680_RD | awk 'BEGIN{FS=","};{printf("%s",$3)}'`
      BME680HUM=`echo -en $BME680HUM | awk 'BEGIN{FS="."};{ptintf("%s",$1)}'`
      BME680GAS=`cat $BME680_RD | awk 'BEGIN{FS=","};{printf("%s",$5)}'`
      BME680HUMBASE=40
      BME680HUMWEIGHT=25
      BME680GASWEIGHT=75
      if [ $HUM -gt $BME680HUMBASE ];then
        HUM_OFFSET=$(($HUM - $BME680HUMBASE))
        HUM_SCORE=$((100 - $BME680HUMBASE - $HUM_OFFSET))
        TMP=$((100 - $BME680HUMBASE))
        HUM_SCORE=$(($HUM_SCORE / $TMP))
        HUM_SCORE=$(($HUM_SCORE * $BME680HUMWEIGHT))
      else
        HUM_OFFSET=$(($BME680HUMBASE - $HUM))
        HUM_SCORE=$(($BME680HUMBASE + $HUM_OFFSET))
        HUM_SCORE=$(($HUM_SCORE / $BME680HUMBASE))
        HUM_SCORE=$(($HUM_SCORE * $$BME680HUMWEIGHT))
      fi
    else
      RD=`$GPIOCTL_I2C 2>&1`
      LEN=`echo $RD|awk '{print(length($0))}'`
      if [ $LEN = 9 ];then
        NOWDATE=`date '+%H:%M'|awk '{printf("%s",$1)}'`
        gpio_i2c=`echo -en ${NOWDATE} ${RD}|awk '{printf("%s,%s℃,%s％",$1,$2,$3)}'`
      fi
    fi
  else
    LOOPI2C=$(($LOOPI2C - 1))
  fi  
  RD="-1"
  RD=`$GPIOCTL 2>&1`
  LEN=`echo $RD|awk '{print(length($0))}'`
  if [ "$RD" != "-1" -o "LEN" = 2 ];then
    GPIOGPIO_INIT_FLAG=NO
    for i in 1 2 4 8 16 32 64 128; do
      case "$i" in
        1) tRD="$(($((0x$RD & 1)) / 1))" ;j=0 ;;
        2) tRD="$(($((0x$RD & 2)) / 2))" ;j=1 ;;
        4) tRD="$(($((0x$RD & 4)) / 4))" ;j=2 ;;
        8) tRD="$(($((0x$RD & 8)) / 8))" ;j=3 ;;
        16) tRD="$(($((0x$RD & 16)) / 16))" ;j=4 ;;
        32) tRD="$(($((0x$RD & 32)) / 32))" ;j=5 ;;
        64) tRD="$(($((0x$RD & 64)) / 64))" ;j=6 ;;
        128) tRD="$(($((0x$RD & 128)) / 128))" ;j=7 ;;
      esac
    old[$j]=$tRD
    done
  else
    GPIOGPIO_INIT_FLAG=YES
    rm -f $GPIOGPIORD $GPIOGPIOWD
  fi
  cat>$tGPIOGPIORD<<END
di[0]=${old[4]}
di[1]=${old[5]}
di[2]=${old[6]}
di[3]=${old[7]}
gpio_i2c=${gpio_i2c}
END
cat>$tGPIOGPIOWD<<END
do[0]=${old[0]}
do[1]=${old[1]}
do[2]=${old[2]}
do[3]=${old[3]}
END
  chown www-data.www-data $tGPIOGPIORD $tGPIOGPIOWD
  mv $tGPIOGPIORD $GPIOGPIORD ; mv $tGPIOGPIOWD $GPIOGPIOWD
  msleep $LOOPTIME
done

