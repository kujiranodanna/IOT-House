#!/bin/sh
# The MIT License
# Copyright (c) 2020-2027 Isamu.Yamauchi , 2011.11.28 update 2025.8.5
# pepostart_remote-hand ; start remote-hand for raspberry pi or zero
systemctl stop dphys-swapfile
dphys-swapfile swapoff
systemctl disable dphys-swapfile
systemctl daemon-reload
#hdparm -S 60 /dev/sda
systemctl stop rsyslog
#systemctl stop networking
systemctl stop apache2
systemctl stop exim4
WORKDIR=/www/remote-hand
WORKDIR_TMP=/www/remote-hand/tmp
MAIL_CONF_ORG="/etc/exim4/passwd.client.org"
MAIL_CONF="/etc/exim4/passwd.client"
tMAIL_CONF=${WORKDIR_TMP}/.passwd.client
IOTHOSECONF_TMP=${WORKDIR_TMP}/iothouse_config.txt
IOTHOSECONF=/boot/iothouse_config.txt
OVERLAY_IOTHOSECONF=/boot/firmware/iothouse_config.txt
WPA_CONF=/etc/wpa_supplicant/wpa_supplicant.conf
tWPA_CONF=${WORKDIR_TMP}/wpa_supplicant.conf
BOOT_WPA_CONF=/boot/firmware/wpa_supplicant.conf
NETWORK_CONF=/etc/network/interfaces
tNETWORK_CONF=${WORKDIR_TMP}/interfaces
NET_RESTART="NO"
if [ ! -e ${WORKDIR} ];then
  [ ! -e /www ] && mkdir -p /www
  [ ! -e ${WORKDIR} ] && mkdir -p ${WORKDIR_TMP}
  [ ! -e /www/tmp ] && mkdir -p /www/tmp
  chmod 777 /www/tmp ;chmod +t /www/tmp/
  if [ -e /usr/src/pepolinux/log.tar.gz ];then
    cd /var ; rm -rf log ; tar xfz /usr/src/pepolinux/log.tar.gz
    chown root:root /var/log
  fi
  if [ -e /usr/src/pepolinux/spool.tar.gz ];then
    cd /www/ ; tar xfz /usr/src/pepolinux/spool.tar.gz
    cd /var ; rm -rf spool ; ln -s /www/spool spool
  fi
  cd /usr/bin/ ; rm -f dio*
  mkdir -p /www/pepolinux ; cd /www/pepolinux ; tar xfz /usr/src/pepolinux/pepolinux.tar.gz ; chown root:root /www/pepolinux
  /etc/init.d/svscan start
  cd /var ; rm -rf mail ; mkdir /www/mail ; chown mail:mail /www/mail ; ln -s /www/mail mail
  cd /etc/exim4 ; cp -f passwd.client.org passwd.client
  if [ -e /usr/src/pepolinux/back_up.tar.gz ];then
    cd ${WORKDIR} ; tar xfz /usr/src/pepolinux/back_up.tar.gz
    cd ${WORKDIR_TMP} ; rm -f LCK* .*.rrd .*start_time *.png *.mp4 *.jpg *.webm gpio_rrdfetch.txt
  else
    cd ${WORKDIR} ; tar xfz /usr/src/pepolinux/remote_pi.tar.gz
    rm -f dio_sh.tar.gz
  fi
  sync
  if [ -e ${WORKDIR}/dio_sh.tar.gz ];then
    cd /usr/bin ; tar xfz ${WORKDIR}/dio_sh.tar.gz
  fi
  if [ -e /usr/src/pepolinux/startup.s ];then
    /usr/src/pepolinux/startup.s
  else
    [ -e /usr/src/pepolinux/back_up.tar.gz ] && rm -f /usr/src/pepolinux/back_up.tar.gz
    [ -e /usr/src/pepolinux/back_up_log.tar.gz ] && rm -f /usr/src/pepolinux/back_up_log.tar.gz
  fi
  chown www-data:www-data ${WORKDIR} ${WORKDIR_TMP}
  if [ -e ${WORKDIR_TMP}/.ping_watch.cron ];then
    crontab -u www-data ${WORKDIR_TMP}/.ping_watch.cron
  fi
  if [ -e ${WORKDIR_TMP}/.pepogmail4dio.conf ];then
      cp /etc/exim4/update-exim4.conf.conf.org  /etc/exim4/update-exim4.conf.conf
    . ${WORKDIR_TMP}/.pepogmail4dio.conf
    cat >/etc/exim4/passwd.client<<END
gmail-smtp.l.google.com:${GMAILUSER}@gmail.com:${GMAILPASSWORD}
*.google.com:${GMAILUSER}@gmail.com:${GMAILPASSWORD}
smtp.gmail.com:${GMAILUSER}@gmail.com:${GMAILPASSWORD}
END
  else
    cat >/etc/exim4/passwd.client<<END
# password file used when the local exim is authenticating to a remote
# host as a client.
#
# see exim4_passwd_client(5) for more documentation
#
# Example:
### target.mail.server.example:login:password
END
    cat >/etc/exim4/update-exim4.conf.conf<<END
# /etc/exim4/update-exim4.conf.conf
#
# Edit this file and /etc/mailname by hand and execute update-exim4.conf
# yourself or use 'dpkg-reconfigure exim4-config'
#
# Please note that this is _not_ a dpkg-conffile and that automatic changes
# to this file might happen. The code handling this will honor your local
# changes, so this is usually fine, but will break local schemes that mess
# around with multiple versions of the file.
#
# update-exim4.conf uses this file to determine variable values to generate
# exim configuration macros for the configuration file.
#
# Most settings found in here do have corresponding questions in the
# Debconf configuration, but not all of them.
#
# This is a Debian specific file

dc_eximconfig_configtype='local'
dc_other_hostnames=$(hostname)
dc_local_interfaces='127.0.0.1'
dc_readhost=''
dc_relay_domains=''
dc_minimaldns='false'
dc_relay_nets=''
dc_smarthost=''
CFILEMODE='644'
dc_use_split_config='false'
dc_hide_mailname=''
dc_mailname_in_oh='true'
dc_localdelivery='mail_spool'
END
  fi
  ZEROW=`cat /proc/cpuinfo| grep "Pi Zero"| wc -l`
  ZERO2W=`cat /proc/cpuinfo| grep "Pi Zero 2 W"| wc -l`
  HOST_NAME=iot011
  ZEROW_YES_NO="NO"
  ZERO2W_YES_NO="NO"
  if [ $ZEROW != 0 ];then
    ZEROW_YES_NO="YES"
    HOST_NAME=iot000   
  fi
  if [ $ZERO2W != 0 ];then
    ZERO2W_YES_NO="YES"
    HOST_NAME=iot0000
  fi
  WLAN0=`ip link |grep wlan0|wc -c`
  ETH0=`ip link |grep eth0|wc -c`
  [ $WLAN0 != 0 ] && WLAN_YES_NO="YES" || WLAN_YES_NO="NO"
  [ $ETH0 != 0 ] && ETH_YES_NO="YES" || ETH_YES_NO="NO"
  if [ $ZEROW_YES_NO = "YES" -a $WLAN_YES_NO = "YES" ];then
    WIFIADDR=`ifconfig wlan0|mawk '/ether/{printf $2}'`
  fi
  if [ $ZEROW_YES_NO = "NO" -a $WLAN_YES_NO = "YES" ];then
    WIFIADDR=`ifconfig wlan0|mawk '/ether/{printf $2}'`
  fi
  if [ ! -e $IOTHOSECONF ];then
    cat >$IOTHOSECONF_TMP<<EOF
# Please describe the setting for IOTHouse below
# Wireless address of this machine -->  ${WIFIADDR}
# The following is an example of a static ip address
#HOST_NAME=${HOST_NAME}
#SSID=iothouse999
#KEY=999iothouse
#IP_ADDRESS=192.168.1.200/24
#GATE_WAY=192.168.1.1
#NAME_SERVER=8.8.8.8
# end of an example

# The following is an example of dynamic ip address
# Access is ${HOST_NAME}.local
#HOST_NAME=${HOST_NAME}
#SSID=iothouse999
#KEY=999iothouse
#IP_ADDRESS=dhcp
# end of an example

HOST_NAME=
SSID=
KEY=
IP_ADDRESS=
GATE_WAY=
NAME_SERVER=
EOF
    mv $IOTHOSECONF_TMP $IOTHOSECONF
    if [ ${ETH_YES_NO} = "YES" ];then
      cat >${tNETWORK_CONF}<<EOF
auto lo
iface lo inet loopback
auto eth0
allow-hotpulug eth0
iface eth0 inet dhcp
iface default inet dhcp
EOF
    fi
    if [ $WLAN_YES_NO = "YES" ];then
      cat >${tNETWORK_CONF}<<EOF
auto lo
iface lo inet loopback
allow-hotpulug wlan0
iface wlan0 inet dhcp
wpa-conf ${WPA_CONF}
iface default inet dhcp
EOF
    fi
  else
    if [ -e $IOTHOSECONF ];then
      if [ -e $OVERLAY_IOTHOSECONF ];then
        . $OVERLAY_IOTHOSECONF
      else    
        . $IOTHOSECONF
      fi
    fi
    cat >$IOTHOSECONF_TMP<<EOF
# Please describe the setting for IOTHouse below
# Wireless address of this machine -->  ${WIFIADDR}
# The following is an example of a static ip address
#HOST_NAME=${HOST_NAME}
#SSID=iothouse999
#KEY=999iothouse
#IP_ADDRESS=192.168.1.200/24
#GATE_WAY=192.168.1.1
#NAME_SERVER=8.8.8.8
# end of an example

# The following is an example of dynamic ip address
# Access is ${HOST_NAME}.local
#HOST_NAME=${HOST_NAME}
#SSID=iothouse999
#KEY=999iothouse
#IP_ADDRESS=dhcp
# end of an example

HOST_NAME=${HOST_NAME}
SSID=${SSID}
KEY=${KEY}
IP_ADDRESS=${IP_ADDRESS}
GATE_WAY=${GATE_WAY}
NAME_SERVER=${NAME_SERVER}
EOF
    cp $IOTHOSECONF_TMP $IOTHOSECONF
    if [ ${ETH_YES_NO} = "YES" ];then
      if [ -z "${SSID}" -a -z "${KEY}" ];then
        ifconfig wlan0 down
        echo -n >${tWPA_CONF}
        if [ "${IP_ADDRESS}" = "dhcp" -o "${IP_ADDRESS}" = "DHCP" -o -z "${IP_ADDRESS}" ];then
          cat >${tNETWORK_CONF}<<EOF
auto lo
iface lo inet loopback
auto eth0
allow-hotpulug eth0
iface eth0 inet dhcp
iface default inet dhcp
EOF
        fi
        if [ ! -z "${IP_ADDRESS}" -a ! -z "${GATE_WAY}" ];then
          cat >${tNETWORK_CONF}<<EOF
auto lo
iface lo inet loopback
auto eth0
allow-hotpulug eth0
iface eth0 inet static
address ${IP_ADDRESS}
gateway ${GATE_WAY}
dns-nameservers ${NAME_SERVER}
EOF
        fi
      fi
    fi
    if [ ${WLAN_YES_NO} = "YES" ];then
      if [ ! -z "${SSID}" -a ! -z "${KEY}" ];then
        cat >${tWPA_CONF}<<EOF
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
network={
        scan_ssid=1
        proto=WPA2
        key_mgmt=WPA-PSK
        pairwise=CCMP
        group=CCMP
EOF
        wpa_passphrase $SSID $KEY  |mawk '/#psk=/{next};/(ssid|psk=)/{printf("%s\n"),$0}' >>${tWPA_CONF}
        echo "}" >>${tWPA_CONF}
        iwconfig wlan0 power off
        if [ "${IP_ADDRESS}" = "dhcp" -o "${IP_ADDRESS}" = "DHCP" -o -z "${IP_ADDRESS}" ];then
          cat >${tNETWORK_CONF}<<EOF
auto lo
iface lo inet loopback
auto wlan0
allow-hotpulug wlan0
iface wlan0 inet dhcp
wpa-conf ${WPA_CONF}
iface default inet dhcp
EOF
        fi
        if [ ! -z "${IP_ADDRESS}" -a ! -z "${GATE_WAY}" ];then
          cat >${tNETWORK_CONF}<<EOF
auto lo
iface lo inet loopback
auto wlan0
allow-hotpulug wlan0
iface wlan0 inet static
wpa-conf ${WPA_CONF}
address ${IP_ADDRESS}
gateway ${GATE_WAY}
dns-nameservers ${NAME_SERVER}
EOF
        fi
      else
        echo -n >${tWPA_CONF}
      fi
    fi
  fi
  if [ -e ${tNETWORK_CONF} ];then
    N_MD5SUM=$(md5sum ${NETWORK_CONF}| mawk '{print $1}')
    tN_MD5SUM=$(md5sum ${tNETWORK_CONF}| mawk '{print $1}')
    if [ ${N_MD5SUM} != ${tN_MD5SUM} ];then
      mv ${tNETWORK_CONF} ${NETWORK_CONF}
      NET_RESTART="YES"
    fi
  fi
  if [ -e ${tWPA_CONF} ];then
    if [ -e ${WPA_CONF} ];then
      W_MD5SUM=$(md5sum ${WPA_CONF}| mawk '{print $1}')
      tW_MD5SUM=$(md5sum ${tWPA_CONF}| mawk '{print $1}')
      if [ ${W_MD5SUM} != ${tW_MD5SUM} ];then
        mv ${tWPA_CONF} ${WPA_CONF}
        NET_RESTART="YES"
      fi
    else
      mv ${tWPA_CONF} ${WPA_CONF}
      NET_RESTART="YES"
    fi
    if [ ${BOOT_WPA_CONF} ];then
      rm ${BOOT_WPA_CONF}
    fi
  fi
  if [ ! -z "${HOST_NAME}" ];then
    if [ $ZEROW_YES_NO = "YES" ];then
      if [ $ZERO2W_YES_NO = "YES" ];then
        hostnamectl hostname ${HOST_NAME}
      else
        hostnamectl set-hostname ${HOST_NAME}
      fi
    fi
    if [ $ZEROW_YES_NO = "NO" ];then
      hostname -b ${HOST_NAME}
    fi
    cat >/etc/hostname<<EOF
${HOST_NAME}
EOF
      cat >/etc/hosts<<EOF
:1		localhost ip6-localhost ip6-loopback
fe00::0		ip6-localnet
ff00::0		ip6-mcastprefix
ff02::1		ip6-allnodes
ff02::2		ip6-allrouters
127.0.1.1	${HOST_NAME}
EOF
  fi
else
  echo remote-hand aredy running!
fi
update-exim4.conf
rm -f /home/pi/.bash_history
touch /www/tmp/.bash_history_pi
mkdir /www/tmp/.npm
rm -rf /root/.npm
ln -s /www/tmp/.npm /root/.npm
ln -s /www/tmp/.bash_history_pi /home/pi/.bash_history
rm -f /root/.bash_history
touch /www/tmp/.bash_history_root
ln -s /www/tmp/.bash_history_root /root/.bash_history
[ -e /root/.viminfo ] && rm /root/.viminfo
[ -e /root/.lesshst ] && rm /root/.lesshst
[ -e /root/.wget-hsts ] && /root/.wget-hsts
[ -e /root/.ssh ] && rm -rf /root/.ssh
rm -rf /var/lib/logrotate
mkdir /www/tmp/logrotate
ln -s /www/tmp/logrotate /var/lib/logrotate
systemctl restart rsyslog
if [ ${NET_RESTART} = "YES" ];then
  systemctl restart networking
fi
[ -e $tNETWORK_CONF ] && rm $tNETWORK_CONF
[ -e $tWPA_CONF ] && rm $tWPA_CONF
[ -e $IOTHOSECONF_TMP ] && rm $IOTHOSECONF_TMP
systemctl restart apache2
#systemctl restart exim4
systemctl restart cron
systemctl restart avahi-daemon